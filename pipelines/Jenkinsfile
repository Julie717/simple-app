pipeline {
    agent { label 'Node_02' }
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub_credentials')
    }
    options {
        buildDiscarder(logRotator(numToKeepStr:'5'))
    }
    stages {
        stage('Clone repository') {
            steps {
                git url: 'https://github.com/Julie717/simple-app', branch: 'master'
            }
        }
        stage('Validate Dockerfile'){
            steps {
                sh """
                docker pull hadolint/hadolint:latest-alpine
                docker run --rm -i hadolint/hadolint < Dockerfile
                """
            }
        }
        stage('Build image') {
            steps {
                sh "docker build -t $DOCKERHUB_CREDENTIALS_USR/simple-app:$BUILD_NUMBER ."
            }
        }
        stage('Test image') {
            steps {
                sh """
                docker run -d -p 8080:8080 --name simple-app $DOCKERHUB_CREDENTIALS_USR/simple-app:$BUILD_NUMBER
                sleep 30s
                curl http://localhost:8080/hello
                docker stop simple-app
                docker container rm simple-app
                """
            }
        }
        stage('Login to Docker Hub') {
            steps {
                sh """
	            echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                echo 'Login Completed'
                """
            }
        }
        stage('Push Image to Docker Hub') {
            steps {
                sh """
	            docker push $DOCKERHUB_CREDENTIALS_USR/simple-app:$BUILD_NUMBER
	            echo 'Push Image Completed'
	            """
	        }
        }
        stage('Deployment to pre-prod') {
            steps {
                timeout(time: 15, unit: "MINUTES") {
        	        input message: 'Do you want to approve the deployment?', ok: 'Yes'
        	    }
        	    script {
                    env.NAMESPACE="pre-prod"
                    env.APP_IMAGE="${DOCKERHUB_CREDENTIALS_USR}/simple-app:${BUILD_NUMBER}"
                    env.APP_HOST="simple-app.${NAMESPACE}.k8s-3.sa"
                }
                sh """
                envsubst < deployment.yaml | kubectl apply -f - -n $NAMESPACE
                """
        	}
        }
        stage('Test pre-prod') {
            steps {
                sh """
                sleep 30s
                curl $APP_HOST/hello
                """
            }
        }
        stage('Deployment to prod') {
            steps {
                timeout(time: 15, unit: "MINUTES") {
        	        input message: 'Do you want to approve the deployment?', ok: 'Yes'
        	    }
        	    script {
                    env.NAMESPACE="prod"
                    env.APP_IMAGE="${DOCKERHUB_CREDENTIALS_USR}/simple-app:${BUILD_NUMBER}"
                    env.APP_HOST="simple-app.${NAMESPACE}.k8s-3.sa"
                }
                sh """
                envsubst < deployment.yaml | kubectl apply -f - -n $NAMESPACE
                """
        	}
        }
        stage('Test prod') {
            steps {
                sh """
                sleep 30s
                curl $APP_HOST/hello
                """
            }
        }
       stage('Cleaning pre-prod') {
            steps {
        	    script {
                    env.NAMESPACE="pre-prod"
                }
                sh """
                kubectl delete --all deployments -n $NAMESPACE
                kubectl delete --all ingresses -n $NAMESPACE
                kubectl delete --all services -n $NAMESPACE
                """
        	}
        }
    }
    post {
         always {
            sh 'docker logout'
         }
         success {
            slackSend (channel: 'app', color: '#00FF00', message: "SUCCESSFUL: Job '${JOB_NAME} [${BUILD_NUMBER}]' (${BUILD_URL})")
            }
         failure {
            slackSend (channel: 'app', color: '#FF0000', message: "FAILED: Job '${JOB_NAME} [${BUILD_NUMBER}]' (${BUILD_URL})")
         }
    }
}